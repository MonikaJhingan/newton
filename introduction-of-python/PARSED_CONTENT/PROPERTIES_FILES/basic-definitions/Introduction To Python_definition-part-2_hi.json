{
    "definition-part-2_key1": "# परिभाषाएं\n\n\n",
    "definition-part-2_key2": "### बाइनरी नंबर\n\n\n",
    "definition-part-2_key3": "बाइनरी नंबरों को मशीनी भाषा या निम्न स्तर की भाषा के रूप में जाना जाता है, बाइनरी नंबर 0 और 1 से बने होते हैं जिन्हें मनुष्य समझ नहीं सकते लेकिन कंप्यूटर कर सकते हैं।\n",
    "definition-part-2_key4": "### `Interpreter`\n\n\n",
    "definition-part-2_key5": "यह `code` लाइन दर लाइन की जांच करता है और जिस लाइन पर `error` मौजूद है, `interpreter` उस लाइन पर `code` को रोकता है और `error` का नाम दिखाता है।\n`Interpreter` उच्च स्तरीय भाषा को निम्न स्तर की भाषा में परिवर्तित करता है जिसकी सहायता से कंप्यूटर `code` को चलाने में सक्षम होता है।\n",
    "definition-part-2_key6": "**`Interpreter` का उपयोग `Python` और रूबी प्रोग्रामिंग भाषाओं के लिए किया जाता है।**\n",
    "definition-part-2_key7": "**उदाहरण :-**\n",
    "definition-part-2_key8": "`Output `\n`file \"<string>\",line 1, in <module>`\n",
    "definition-part-2_key9": "इस उदाहरण में आपने देखा कि मैंने **a** नाम का एक `variable` लिया है और इसे एक स्ट्रिंग मान दिया है, लेकिन मैं \" \"(उद्धरण) डालना भूल गया। इसलिए, `python` की पहचान नहीं हो पाई जिस प्रकार का मान मैंने `variable` **a** को दिया था। इसलिए, `interpreter` ने `error` वाली लाइन पर `code` को रोक दिया और `error` प्रदर्शित किया।\n",
    "definition-part-2_key10": "### `Compiler`\n\n\n",
    "definition-part-2_key11": "`Compiler` एक ऐसा सॉफ्टवेयर है जो एक बार में संपूर्ण `code` को स्कैन करता है और यदि `code` में कोई `error` है, तो यह `code` के अंत में `error` दिखाता है।\nजबकि `interpreter` , `code` को उस लाइन पर रोकता है जिसमें `error` है।\n",
    "definition-part-2_key12": "**`Compiler` का उपयोग C और C++ प्रोग्रामिंग भाषाओं में किया जाता है।**\n",
    "definition-part-2_key13": "संकलक और दुभाषिया\n",
    "definition-part-2_key14": "### अक्षर संवेदनशील\n\n\n",
    "definition-part-2_key15": "केस सेंसिटिव का मतलब है कि हमने जो टेक्स्ट टाइप किया है वह ठीक वैसा ही होना चाहिए जैसा कि हम इसे `code` में कहीं भी टाइप करते हैं।\n",
    "definition-part-2_key16": "**उदाहरण :-**\n",
    "definition-part-2_key17": "`Output`\n",
    "definition-part-2_key18": "`Var is not defined`\n",
    "definition-part-2_key19": "उदाहरण के लिए, उपरोक्त उदाहरण में, हमने एक `variable` को **var** नाम दिया है और प्रिंट करते समय हमने **Var** टाइप किया है, इसलिए एक `error` प्रदर्शित किया गया था क्योंकि `python` var और Var में हैं विभिन्न। `python` में छोटे अक्षरों और बड़े अक्षरों को अलग-अलग माना जाता है।\n",
    "definition-part-2_key20": "अक्षर संवेदनशील\n",
    "definition-part-2_key21": "### `Error` / कीड़े\n\n\n",
    "definition-part-2_key22": "जब हम `code` लिखते समय कोई गलती करते हैं, तो उस गलती को `error`/bug कहा जाता है।\n**उदाहरण :-**\n",
    "definition-part-2_key23": "`Output`\n",
    "definition-part-2_key24": "`SyntaxError: unexpected EOF while parsing`\n",
    "definition-part-2_key25": "`Output`\n",
    "definition-part-2_key26": "`SyntaxError: invalid `वाक्यविन्यास`",
    "definition-part-2_key27": "इस उदाहरण में आपने देखा कि छपाई करते समय मैं कोष्ठक लगाना भूल गया था इसलिए इसने हमें एक `syntax` `error` दिखाया, जिसका अर्थ है कि हमारे `code` में कुछ गलती है/`error`\n",
    "definition-part-2_key28": "### डिबग\n\n\n",
    "definition-part-2_key29": "डिबग का अर्थ है दिए गए `code` में बग/`error` को हल करना या `code` से `error` को हटाना और सही `code` लिखना जो `syntax` के अनुसार है।\n",
    "definition-part-2_key30": "**उदाहरण**\n",
    "definition-part-2_key31": "`Output`\n",
    "definition-part-2_key32": "`5`\n",
    "definition-part-2_key33": "`Output`\n",
    "definition-part-2_key34": "`2`\n",
    "definition-part-2_key35": "जैसा कि आपने बग उदाहरण में देखा कि दूसरे `code` में एक बग मौजूद था, इसलिए हमने उस `code` को डिबग किया।\n",
    "definition-part-2_key36": "### स्रोत `code`\n\n\n",
    "definition-part-2_key37": "स्रोत `code` वह `code` है जिसे मनुष्य आसानी से समझ सकते हैं।\n**उदाहरण**\n",
    "definition-part-2_key38": "`Output`\n",
    "definition-part-2_key39": "`python`\n",
    "definition-part-2_key40": "इस उदाहरण में आपने देखा कि हमने एक `variable` को **name** नाम दिया है और हमने इसमें `python` स्टोर किया है। Ypu इस `code` को आसानी से पढ़ और समझ सकता है। यह `code` स्रोत कहा जाता है `code`/main `code`।\n"
}