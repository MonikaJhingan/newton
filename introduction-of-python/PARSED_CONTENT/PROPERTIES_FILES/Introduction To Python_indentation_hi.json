{
    "indentation_key1": "नाम: इंडेंटेशन\n",
    "indentation_key2": "# `Indentation` क्या है?\n\n\n",
    "indentation_key3": "कृपया नीचे दिए गए `code` पर एक नज़र डालें। अब इस `code` के बिना दौड़े `output` के बारे में सोचें।\n",
    "indentation_key4": "आपने क्या उत्तर सोचा? कृपया इसे `code` , `save` इसे एक `file` में कॉपी पेस्ट करें और इसे `code` चलाएं। आप देखेंगे कि यह `code` कोई भी `output` प्रिंट नहीं करेगा, लेकिन `error` देता है। इस `error` को समझने के लिए हमें `python` के दृष्टिकोण से सोचने की जरूरत है। `Python` इस कार्यक्रम को इस प्रकार चलाएगा:-\n",
    "indentation_key5": "पहली पंक्ति में यह मान 10 को \"a\" में रखेगा।\n",
    "indentation_key6": "दूसरी पंक्ति में `python` जांच करेगा कि **a** को 2 से गुणा करने पर 20 के बराबर परिणाम मिलता है या नहीं।\n",
    "indentation_key7": "तीसरी पंक्ति तक `python` यह जान सकेगा कि **a** 2 को गुणा करने पर हमें निश्चित रूप से 20 प्राप्त होंगे। लेकिन इस स्थान पर `python` भ्रमित हो जाता है, यह समझ में नहीं आता है कि क्या इसे केवल प्रिंट करना चाहिए \"`Variable` a को 2 से गुणा करने पर 20 प्राप्त होता है।\" या इसे नीचे दिए गए `code` को भी चलाने की जरूरत है या नहीं। मनुष्य इसे आसानी से समझ सकता है, लेकिन कंप्यूटर पागल हो जाता है और `error` देता है।\n\n\n",
    "indentation_key8": "हम इस कार्यक्रम को इस प्रकार सही ढंग से लिखेंगे,\n",
    "indentation_key9": "जब `python` यह सही `code` चलाएगा, तब उसका दिमाग इस तरह काम करेगा।\n",
    "indentation_key10": "पहली पंक्ति में यह मान 10 को \"a\" में रखेगा।\n",
    "indentation_key11": "दूसरी पंक्ति में `python` जांच करेगा कि **a** को 2 से गुणा करने पर 20 के बराबर परिणाम मिलता है या नहीं।\n",
    "indentation_key12": "तीसरी पंक्ति में, `python` प्रिंट करेगा \"`Variable` a जब 2 से गुणा करने पर 20 प्राप्त होता है।\" अब आप सोचेंगे कि `python` इस `code` में इस लाइन को प्रिंट करता है तो यह प्रिंट में क्यों नहीं छपा पिछला उदाहरण। लेकिन, थोड़ा ध्यान से देखें कि तीसरी पंक्ति कुछ जगह के बाद शुरू हुई है। इन रिक्त स्थान को `python` में इंडेंट कहा जाता है। अब, `python` यह समझता है कि **a** को 2 से गुणा करने पर हमें 20 प्राप्त होता है, यदि यह स्थिति `true` है, तो हम नीचे इंडेंट वाली पंक्तियों को चलाएंगे। **अगर**।\n",
    "indentation_key13": "चौथी पंक्ति में `python` अन्य ढूंढता है लेकिन यह अन्य भाग नहीं चलाता है क्योंकि यदि भाग पहले ही चल चुका है। तो, अगर `statement` का उपयोग कैसे करें, इसके बारे में जानने का प्रयास करें।\n\n\n",
    "indentation_key14": "`python` में इस रिक्ति को `indentation` कहा जाता है। जब भी `indentation` से संबंधित कोई समस्या होती है, तो `Python` इसे `Indentation` `Error` यह `error` इस तरह दिखता है:\n",
    "indentation_key15": "#एक और उदाहरण\n\n\n",
    "indentation_key16": "हम और उदाहरण लेंगे और इसे स्पष्ट रूप से समझेंगे। सबसे पहले नीचे दिए गए `code` को चलाएं। इसके बाद नीचे दिए गए टेक्स्ट को पढ़ें।\n",
    "indentation_key17": "इस प्रोग्राम में अंतिम 3 पंक्तियों में `(‘print \"The counter is\" + str(counter)’, ‘counter = counter + 1’, ‘print \"--------\"’) `यदि कोई `indentation` नहीं है तो `पायथन` यह नहीं समझ पाएगा कि `loop` के बाद उसे क्या चलाना है? `python` भ्रमित हो जाएगा और `error` देगा। एक `python` `code` को इंडेंट करना बहुत महत्वपूर्ण है। यदि आप प्रोग्राम देखते हैं, तो आप महसूस करेंगे कि `code` को विभिन्न भागों में बांटा गया है:\n",
    "indentation_key18": "पहले भाग में, `counter` `variable` परिभाषित किया गया है और हम लाइन लिखते हैं `while counter < 10` ।\n",
    "indentation_key19": "दूसरे भाग में, हमने लिखा है कि `code` जो `loop` के लिए बार-बार तब तक चलेगा जब तक `loop` चल रहा है।\n`code` के विभिन्न भागों को `code` ब्लॉक कहा जाता है और `python` में इन ब्लॉकों को इंडेंट करने के लिए हम `tab` का उपयोग करते हैं।\nइसे समझने के लिए, `save` दिए गए `code` एक नए `file` में और देखें कि `output` क्या आता है और यह कैसे `output` `code` ऊपर दिया गया है। इसके बाद चर्चा करें कि क्या हुआ?\n",
    "indentation_key20": "**नोट: जब भी आप `code` लिखते हैं, तो आपके `editor` को `code` को इंडेंट करना चाहिए, लेकिन अगर वह ऐसा नहीं करता है, तो आप इंडेंटिंग के लिए `Tab` `key` का उपयोग कर सकते हैं। **\n",
    "indentation_key21": "**नोट: आप `indentation` के लिए स्पेस `key` का भी उपयोग कर सकते हैं। स्पेस `key` का उपयोग करना मुश्किल है, इसके उपयोग के कारण कई `error` होते हैं, बस इसके कारण कई `error` होते हैं, यही कारण है कि कई डेवलपर्स (सॉफ्टवेयर इंजीनियर) `Tab` का उपयोग करते हैं ताकि मामूली `errors`नहीं होता है।**\n",
    "indentation_key22": "# `Indentation` . के कई स्तर\n\n\n",
    "indentation_key23": "दिए गए इंडेंट में `code` ब्लॉक एक और इंडेंटेड `code` ब्लॉक हो सकता है। इस `code` का अध्ययन करें और समझें और बताएं कि `output` कैसे आता है? इसे `code` चलाने का प्रयास करें और देखें कि आपने `output` के बारे में सही सोचा है या नहीं। यदि नहीं, तो सोचने के लिए अपने दिमाग का उपयोग करें। यह और अधिक।\n",
    "indentation_key24": "कृपया यहां देखें कि इस `code` में, इंडेंटेड `code` ब्लॉक के 2 स्तर मौजूद हैं।\n",
    "indentation_key25": "पहले स्तर के बाद `if counter % 2 == 0’ is present.`\n",
    "indentation_key26": "दूसरे स्तर में `print (\"Counter is an even number.\")` मौजूद है।\n\n\n",
    "indentation_key27": "यहां, `python` तब चलेगा जब `loop` और `print (\"Counter is an even number.\")` के अंतर्गत तभी चलेगा जब `loop` `counter` मान एक सम संख्या हो।\n"
}