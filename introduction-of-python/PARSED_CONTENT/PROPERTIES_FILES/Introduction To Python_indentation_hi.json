{
    "indentation_key1": "नाम: इंडेंटेशन\n",
    "indentation_key2": "# इंडेंटेशन क्या है?\n\n\n",
    "indentation_key3": "कृपया नीचे दिए गए कोड पर एक नज़र डालें। अब बिना चलाए इस कोड के आउटपुट के बारे में सोचें।\n",
    "indentation_key4": "आपने क्या उत्तर सोचा? कृपया इस कोड को कॉपी पेस्ट करें, इसे फ़ाइल में सहेजें और इस कोड को चलाएं। आप देखेंगे कि यह कोड किसी आउटपुट को प्रिंट नहीं करेगा, लेकिन त्रुटि देता है। इस त्रुटि को समझने के लिए हमें `python` के दृष्टिकोण से सोचने की जरूरत है। . `Python` इस कार्यक्रम को इस प्रकार चलाएगा:-\n",
    "indentation_key5": "पहली पंक्ति में यह मान 10 को \"a\" में डाल देगा।\n",
    "indentation_key6": "दूसरी पंक्ति में `python` जांच करेगा कि **a** को 2 से गुणा करने पर 20 के बराबर परिणाम मिलता है या नहीं।\n",
    "indentation_key7": "तीसरी पंक्ति तक `python` यह जान सकेगा कि **a** 2 को गुणा करने पर हमें निश्चित रूप से 20 प्राप्त होंगे। लेकिन इस स्थान पर `python` भ्रमित हो जाता है, यह समझ में नहीं आता है कि क्या इसे केवल प्रिंट करना चाहिए \"`Variable` a को 2 से गुणा करने पर 20 प्राप्त होता है।\" या इसे नीचे दिए गए कोड को भी चलाने की जरूरत है या नहीं। मनुष्य इसे आसानी से समझ सकता है, लेकिन कंप्यूटर पागल हो जाता है और त्रुटि देता है।\n\n\n",
    "indentation_key8": "हम इस कार्यक्रम को इस प्रकार सही ढंग से लिखेंगे,\n",
    "indentation_key9": "जब `python` इस सही कोड को चलाएगा तो उसका दिमाग इस तरह काम करेगा।\n",
    "indentation_key10": "पहली पंक्ति में यह मान 10 को \"a\" में डाल देगा।\n",
    "indentation_key11": "दूसरी पंक्ति में `python` जांच करेगा कि **a** को 2 से गुणा करने पर 20 के बराबर परिणाम मिलता है या नहीं।\n",
    "indentation_key12": "तीसरी पंक्ति में, `python` प्रिंट करेगा \"`Variable` a को 2 से गुणा करने पर 20 प्राप्त होता है। अब आप सोचेंगे कि `python` इस कोड में इस लाइन को प्रिंट करता है तो यह पिछले उदाहरण में क्यों नहीं छापा। लेकिन , थोड़ा ध्यान से देखें कि तीसरी पंक्ति कुछ जगह के बाद शुरू हुई है। इन रिक्त स्थान को `python` में इंडेंट कहा जाता है। अब, `python` यह समझता है कि **a** को 2 से गुणा करने पर हमें 20 प्राप्त होता है, यदि यह स्थिति `true` है, तो हम नीचे इंडेंट वाली पंक्तियों को चलाएंगे। **अगर**।\n",
    "indentation_key13": "चौथी पंक्ति में `python` अन्य ढूंढता है लेकिन यह अन्य भाग नहीं चलाता है क्योंकि यदि भाग पहले ही चल चुका है। तो, if स्टेटमेंट का उपयोग कैसे करें, इसके बारे में जानने का प्रयास करें।\n\n\n",
    "indentation_key14": "`python` में इस रिक्ति को इंडेंटेशन कहा जाता है। जब भी इंडेंटेशन से संबंधित कोई समस्या होती है, तो `Python` इसे इंडेंटेशन एरर के रूप में कॉल करें यह त्रुटि इस तरह दिखती है:\n",
    "indentation_key15": "#एक और उदाहरण\n\n\n",
    "indentation_key16": "हम और उदाहरण लेंगे और इसे स्पष्ट रूप से समझेंगे। सबसे पहले नीचे दिए गए कोड को रन करें। इसके बाद नीचे दिए गए टेक्स्ट को पढ़ें।\n",
    "indentation_key17": "इस कार्यक्रम में, पिछले 3 लाइनों में ` (‘print \"The counter is\" + str(counter)’, ‘counter = counter + 1’, ‘print \"--------\"’) ` अगर कोई खरोज है तो `python` नहीं कि पाश यह क्या है के बाद चलाने के लिए है, जबकि को समझने में सक्षम हो जाएगा?`Python` भ्रमित हो जाएगी और एक त्रुटि दे देंगे . एक `python` कोड इंडेंट करने के लिए बहुत महत्वपूर्ण है। यदि आप प्रोग्राम देखते हैं, तो आप महसूस करेंगे कि कोड विभिन्न भागों में विभाजित है:\n",
    "indentation_key18": "पहले भाग में, `counter` `variable` परिभाषित किया गया है और हम लाइन लिखते हैं `while counter < 10` ।\n",
    "indentation_key19": "दूसरे भाग में, हमने वह कोड लिखा है जो लूप के बाद बार-बार तब तक चलेगा जब तक कि लूप चल रहा हो।\nकोड के विभिन्न भागों को कोड ब्लॉक कहा जाता है और `python` में इन ब्लॉकों को इंडेंट करने के लिए हम टैब का उपयोग करते हैं।\nइसे समझने के लिए दिए गए कोड को एक नई फाइल में सेव करें और देखें कि क्या आउटपुट आता है और वह आउटपुट ऊपर दिए गए कोड के आउटपुट से कैसे अलग है। इसके बाद चर्चा करें कि क्या हुआ?\n",
    "indentation_key20": "**नोट: जब भी आप कोड लिखें, तो आपके संपादक को कोड को इंडेंट करना चाहिए, लेकिन अगर वह ऐसा नहीं करता है, तो आप इंडेंटिंग के लिए टैब कुंजी का उपयोग कर सकते हैं।**\n",
    "indentation_key21": "**नोट: आप इंडेंटेशन के लिए स्पेस की का भी उपयोग कर सकते हैं। स्पेस की का उपयोग करना मुश्किल है, क्योंकि इसके उपयोग के कारण कई त्रुटियाँ होती हैं, बस इसके कारण कई त्रुटियाँ होती हैं, इसलिए कई डेवलपर्स (सॉफ्टवेयर इंजीनियर) टैब का उपयोग करते हैं ताकि छोटी-मोटी त्रुटियां न हों।\n",
    "indentation_key22": "# इंडेंटेशन के कई स्तर\n\n\n",
    "indentation_key23": "किसी दिए गए इंडेंट कोड ब्लॉक में एक और इंडेंट कोड ब्लॉक हो सकता है। इस कोड का अध्ययन करें और समझें और बताएं कि आउटपुट कैसे आता है? इस कोड को चलाने की कोशिश करें और देखें कि आपने आउटपुट के बारे में सही सोचा है या नहीं। यदि नहीं, तो इसके बारे में अधिक सोचने के लिए अपने दिमाग का उपयोग करें।\n",
    "indentation_key24": "कृपया यहां देखें कि इस कोड में इंडेंट कोड ब्लॉक के 2 स्तर मौजूद हैं।\n",
    "indentation_key25": "पहले स्तर के बाद `if counter % 2 == 0’ is present.`\n",
    "indentation_key26": "दूसरे स्तर में `print (\"Counter is an even number.\")` मौजूद है।\n\n\n",
    "indentation_key27": "यहां, `python` तब चलेगा जब लूप के अंदर और `print (\"Counter is an even number.\")` केवल लूप के अंदर होने पर `counter` मान एक सम संख्या है।\n"
}