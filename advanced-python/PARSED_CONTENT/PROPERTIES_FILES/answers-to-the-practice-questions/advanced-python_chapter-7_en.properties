chapter-7_key1=name: chapter-7
chapter-7_key2=Chapter 7
chapter-7_key3=The re.compile() function returns Regex objects.
chapter-7_key4=Raw strings are used so that backslashes do not have to be escaped.
chapter-7_key5=The search() method returns Match objects.
chapter-7_key6=The group() method returns strings of the matched text.
chapter-7_key7=Group 0 is the entire match, group 1 covers the first set of parentheses, and group 2 covers the second set of parentheses.
chapter-7_key8=Periods and parentheses can be escaped with a backslash: 
chapter-7_key9=, 
chapter-7_key10=, and 
chapter-7_key11=.
chapter-7_key12=If the regex has no groups, a list of strings is returned. If the regex has groups, a list of tuples of strings is returned.
chapter-7_key13=The | character signifies matching “either, or” between two groups.
chapter-7_key14=The ? character can either mean “match zero or one of the preceding group” or be used to signify nongreedy matching.
chapter-7_key15=The + matches one or more. The * matches zero or more.
chapter-7_key16=The {3} matches exactly three instances of the preceding group. The {3,5} matches between three and five instances.
chapter-7_key17=The \d, \w, and \s shorthand character classes match a single digit, word, or space character, respectively.
chapter-7_key18=The \D, \W, and \S shorthand character classes match a single character that is not a digit, word, or space character, respectively.
chapter-7_key19=Passing re.I or re.IGNORECASE as the second argument to re.compile() will make the matching case insensitive.
chapter-7_key20=The . character normally matches any character except the newline character. If re.DOTALL is passed as the second argument to re.compile(), then the dot will also match newline characters.
chapter-7_key21=The .* performs a greedy match, and the .
chapter-7_key22=? performs a nongreedy match.
Either [0-9a-z] or [a-z0-9]
'X drummers, X pipers, five rings, X hens'
The re.VERBOSE argument allows you to add whitespace and comments to the string passed to re.compile().
re.compile(r'^\d{1,3}(,\d{3})
chapter-7_key23=$') will create this regex, but other regex strings can produce a similar regular expression.
chapter-7_key24=re.compile(r'[A-Z][a-z]*\sNakamoto')
re.compile(r'(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)
chapter-7_key25=', re.IGNORECASE)
